# Generated by Django 4.2.7 on 2025-09-04 13:17

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('employees', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='PermissionOverride',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('override_type', models.CharField(choices=[('GRANT', '許可'), ('RESTRICT', '制限')], help_text='オーバーライド種別', max_length=10)),
                ('resource_type', models.CharField(choices=[('DEVICE', '端末'), ('SOFTWARE', 'ソフトウェア')], help_text='リソース種別', max_length=10)),
                ('resource_identifier', models.CharField(help_text='リソース識別子（端末種別またはソフトウェア名）', max_length=200)),
                ('effective_from', models.DateField(default=django.utils.timezone.now, help_text='有効開始日')),
                ('effective_until', models.DateField(help_text='有効終了日')),
                ('reason', models.TextField(help_text='理由')),
                ('notes', models.TextField(blank=True, help_text='備考')),
                ('is_active', models.BooleanField(default=True, help_text='有効フラグ')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='作成者', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_overrides', to=settings.AUTH_USER_MODEL)),
                ('employee', models.ForeignKey(help_text='対象社員', on_delete=django.db.models.deletion.CASCADE, related_name='permission_overrides', to='employees.employee')),
            ],
            options={
                'verbose_name': '権限オーバーライド',
                'verbose_name_plural': '権限オーバーライド',
                'db_table': 'permission_overrides',
                'ordering': ['-effective_from'],
            },
        ),
        migrations.CreateModel(
            name='PermissionAuditLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('action', models.CharField(choices=[('POLICY_CREATED', 'ポリシー作成'), ('POLICY_UPDATED', 'ポリシー更新'), ('POLICY_DELETED', 'ポリシー削除'), ('OVERRIDE_CREATED', 'オーバーライド作成'), ('OVERRIDE_UPDATED', 'オーバーライド更新'), ('OVERRIDE_DELETED', 'オーバーライド削除'), ('ACCESS_GRANTED', 'アクセス許可'), ('ACCESS_DENIED', 'アクセス拒否'), ('PERMISSION_CHECK', '権限チェック'), ('AUTO_UPDATE', '自動更新')], help_text='アクション', max_length=20)),
                ('resource_type', models.CharField(blank=True, help_text='リソース種別', max_length=20)),
                ('resource_identifier', models.CharField(blank=True, help_text='リソース識別子', max_length=200)),
                ('result', models.CharField(blank=True, help_text='結果', max_length=20)),
                ('details', models.JSONField(blank=True, default=dict, help_text='詳細情報')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IPアドレス', null=True)),
                ('user_agent', models.TextField(blank=True, help_text='ユーザーエージェント')),
                ('employee', models.ForeignKey(blank=True, help_text='対象社員', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='permission_audit_logs', to='employees.employee')),
                ('performed_by', models.ForeignKey(blank=True, help_text='実行者', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '権限監査ログ',
                'verbose_name_plural': '権限監査ログ',
                'db_table': 'permission_audit_logs',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='PermissionPolicy',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='ポリシー名', max_length=200)),
                ('description', models.TextField(blank=True, help_text='ポリシーの説明')),
                ('policy_type', models.CharField(choices=[('DEPARTMENT', '部署別'), ('POSITION', '役職別'), ('INDIVIDUAL', '個別'), ('GLOBAL', '全社共通')], help_text='ポリシー種別', max_length=20)),
                ('target_department', models.CharField(blank=True, help_text='対象部署（部署別ポリシーの場合）', max_length=100, null=True)),
                ('target_position', models.CharField(blank=True, help_text='対象役職（役職別ポリシーの場合）', max_length=100, null=True)),
                ('priority', models.IntegerField(choices=[(1, '最高'), (2, '高'), (3, '中'), (4, '低'), (5, '最低')], default=3, help_text='優先度（数値が小さいほど高優先度）')),
                ('allowed_device_types', models.JSONField(blank=True, default=list, help_text='許可端末種別のリスト')),
                ('max_devices_per_type', models.JSONField(blank=True, default=dict, help_text='端末種別ごとの最大保有数')),
                ('allowed_software', models.JSONField(blank=True, default=list, help_text='許可ソフトウェアのリスト')),
                ('restricted_software', models.JSONField(blank=True, default=list, help_text='禁止ソフトウェアのリスト')),
                ('max_licenses_per_software', models.JSONField(blank=True, default=dict, help_text='ソフトウェアごとの最大ライセンス数')),
                ('is_active', models.BooleanField(default=True, help_text='有効フラグ')),
                ('effective_from', models.DateField(default=django.utils.timezone.now, help_text='有効開始日')),
                ('effective_until', models.DateField(blank=True, help_text='有効終了日', null=True)),
                ('auto_approve_requests', models.BooleanField(default=False, help_text='申請の自動承認')),
                ('require_manager_approval', models.BooleanField(default=True, help_text='管理者承認必須')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='作成者', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_policies', to=settings.AUTH_USER_MODEL)),
                ('target_employee', models.ForeignKey(blank=True, help_text='対象社員（個別ポリシーの場合）', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='individual_policies', to='employees.employee')),
                ('updated_by', models.ForeignKey(blank=True, help_text='更新者', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_policies', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '権限ポリシー',
                'verbose_name_plural': '権限ポリシー',
                'db_table': 'permission_policies',
                'ordering': ['priority', 'name'],
                'indexes': [models.Index(fields=['policy_type'], name='permission__policy__8c4a33_idx'), models.Index(fields=['target_department'], name='permission__target__12ef4f_idx'), models.Index(fields=['target_position'], name='permission__target__247316_idx'), models.Index(fields=['priority'], name='permission__priorit_792c89_idx'), models.Index(fields=['is_active'], name='permission__is_acti_1560dd_idx')],
            },
        ),
        migrations.AddConstraint(
            model_name='permissionpolicy',
            constraint=models.CheckConstraint(check=models.Q(models.Q(models.Q(('policy_type', 'DEPARTMENT'), _negated=True), ('target_department__isnull', False), _connector='OR')), name='department_policy_has_target_department'),
        ),
        migrations.AddConstraint(
            model_name='permissionpolicy',
            constraint=models.CheckConstraint(check=models.Q(models.Q(models.Q(('policy_type', 'POSITION'), _negated=True), ('target_position__isnull', False), _connector='OR')), name='position_policy_has_target_position'),
        ),
        migrations.AddConstraint(
            model_name='permissionpolicy',
            constraint=models.CheckConstraint(check=models.Q(models.Q(models.Q(('policy_type', 'INDIVIDUAL'), _negated=True), ('target_employee__isnull', False), _connector='OR')), name='individual_policy_has_target_employee'),
        ),
        migrations.AddIndex(
            model_name='permissionoverride',
            index=models.Index(fields=['employee', 'resource_type'], name='permission__employe_5fc75d_idx'),
        ),
        migrations.AddIndex(
            model_name='permissionoverride',
            index=models.Index(fields=['effective_from', 'effective_until'], name='permission__effecti_8d8406_idx'),
        ),
        migrations.AddIndex(
            model_name='permissionoverride',
            index=models.Index(fields=['is_active'], name='permission__is_acti_a07d60_idx'),
        ),
        migrations.AddIndex(
            model_name='permissionauditlog',
            index=models.Index(fields=['action', '-timestamp'], name='permission__action_fb050c_idx'),
        ),
        migrations.AddIndex(
            model_name='permissionauditlog',
            index=models.Index(fields=['employee', '-timestamp'], name='permission__employe_bb4e4f_idx'),
        ),
        migrations.AddIndex(
            model_name='permissionauditlog',
            index=models.Index(fields=['resource_type', '-timestamp'], name='permission__resourc_510cb6_idx'),
        ),
    ]

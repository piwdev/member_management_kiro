# Generated by Django 4.2.7 on 2025-09-04 12:46

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('employees', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='License',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('software_name', models.CharField(help_text='ソフトウェア名', max_length=200)),
                ('license_type', models.CharField(help_text='ライセンス種別 (例: Standard, Professional, Enterprise)', max_length=100)),
                ('total_count', models.PositiveIntegerField(help_text='購入数', validators=[django.core.validators.MinValueValidator(1)])),
                ('available_count', models.PositiveIntegerField(help_text='利用可能数', validators=[django.core.validators.MinValueValidator(0)])),
                ('expiry_date', models.DateField(help_text='有効期限')),
                ('license_key', models.TextField(blank=True, help_text='ライセンスキー', null=True)),
                ('usage_conditions', models.TextField(blank=True, help_text='利用条件')),
                ('pricing_model', models.CharField(choices=[('MONTHLY', '月額'), ('YEARLY', '年額'), ('PERPETUAL', '買い切り')], help_text='課金体系', max_length=20)),
                ('unit_price', models.DecimalField(decimal_places=2, help_text='単価', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('vendor_name', models.CharField(blank=True, help_text='ベンダー名', max_length=200)),
                ('purchase_date', models.DateField(blank=True, help_text='購入日', null=True)),
                ('description', models.TextField(blank=True, help_text='説明')),
                ('notes', models.TextField(blank=True, help_text='備考')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='作成者', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_licenses', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='更新者', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_licenses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'ライセンス',
                'verbose_name_plural': 'ライセンス',
                'db_table': 'licenses',
                'ordering': ['software_name', 'license_type'],
            },
        ),
        migrations.CreateModel(
            name='LicenseAssignment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('assigned_date', models.DateField(default=django.utils.timezone.now, help_text='割当日')),
                ('start_date', models.DateField(help_text='利用開始日')),
                ('end_date', models.DateField(blank=True, help_text='利用終了日', null=True)),
                ('purpose', models.TextField(help_text='利用目的')),
                ('status', models.CharField(choices=[('ACTIVE', 'アクティブ'), ('EXPIRED', '期限切れ'), ('REVOKED', '取り消し')], default='ACTIVE', help_text='ステータス', max_length=10)),
                ('notes', models.TextField(blank=True, help_text='備考')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('revoked_at', models.DateTimeField(blank=True, help_text='取り消し日時', null=True)),
                ('assigned_by', models.ForeignKey(blank=True, help_text='割当者', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_licenses', to=settings.AUTH_USER_MODEL)),
                ('employee', models.ForeignKey(help_text='社員', on_delete=django.db.models.deletion.CASCADE, related_name='license_assignments', to='employees.employee')),
                ('license', models.ForeignKey(help_text='ライセンス', on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='licenses.license')),
                ('revoked_by', models.ForeignKey(blank=True, help_text='取り消し者', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='revoked_licenses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'ライセンス割当',
                'verbose_name_plural': 'ライセンス割当',
                'db_table': 'license_assignments',
                'ordering': ['-assigned_date'],
                'indexes': [models.Index(fields=['license', 'status'], name='license_ass_license_09c4ba_idx'), models.Index(fields=['employee', 'status'], name='license_ass_employe_243d0e_idx'), models.Index(fields=['assigned_date'], name='license_ass_assigne_21462d_idx'), models.Index(fields=['start_date'], name='license_ass_start_d_2cd983_idx'), models.Index(fields=['end_date'], name='license_ass_end_dat_585529_idx')],
            },
        ),
        migrations.AddConstraint(
            model_name='licenseassignment',
            constraint=models.UniqueConstraint(condition=models.Q(('status', 'ACTIVE')), fields=('license', 'employee'), name='unique_active_license_assignment'),
        ),
        migrations.AddIndex(
            model_name='license',
            index=models.Index(fields=['software_name'], name='licenses_softwar_9370a9_idx'),
        ),
        migrations.AddIndex(
            model_name='license',
            index=models.Index(fields=['expiry_date'], name='licenses_expiry__b19b7b_idx'),
        ),
        migrations.AddIndex(
            model_name='license',
            index=models.Index(fields=['pricing_model'], name='licenses_pricing_c907d7_idx'),
        ),
        migrations.AddConstraint(
            model_name='license',
            constraint=models.CheckConstraint(check=models.Q(('available_count__lte', models.F('total_count'))), name='available_count_lte_total_count'),
        ),
    ]

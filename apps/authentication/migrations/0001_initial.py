# Generated by Django 4.2.7 on 2025-09-04 11:50

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('employee_id', models.CharField(blank=True, help_text='社員ID (Employee ID)', max_length=20, null=True, unique=True)),
                ('department', models.CharField(blank=True, help_text='部署 (Department)', max_length=100)),
                ('position', models.CharField(blank=True, help_text='役職 (Position)', max_length=100)),
                ('location', models.CharField(blank=True, choices=[('TOKYO', '東京'), ('OKINAWA', '沖縄'), ('REMOTE', 'リモート')], help_text='勤務地 (Work Location)', max_length=10)),
                ('hire_date', models.DateField(blank=True, help_text='入社日 (Hire Date)', null=True)),
                ('phone_number', models.CharField(blank=True, help_text='電話番号 (Phone Number)', max_length=20)),
                ('ldap_dn', models.CharField(blank=True, help_text='LDAP Distinguished Name', max_length=255)),
                ('last_login_ip', models.GenericIPAddressField(blank=True, help_text='最終ログインIP (Last Login IP)', null=True)),
                ('failed_login_attempts', models.PositiveIntegerField(default=0, help_text='ログイン失敗回数 (Failed Login Attempts)')),
                ('account_locked_until', models.DateTimeField(blank=True, help_text='アカウントロック期限 (Account Locked Until)', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'ユーザー',
                'verbose_name_plural': 'ユーザー',
                'db_table': 'auth_users',
                'ordering': ['username'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='LoginAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=150)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField(blank=True)),
                ('success', models.BooleanField(default=False)),
                ('failure_reason', models.CharField(blank=True, max_length=100)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='login_attempts', to='authentication.user')),
            ],
            options={
                'verbose_name': 'ログイン試行',
                'verbose_name_plural': 'ログイン試行',
                'db_table': 'auth_login_attempts',
                'ordering': ['-timestamp'],
            },
        ),
    ]
